/*
给定一个二叉树，找出其最小深度。
最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
说明: 叶子节点是指没有子节点的节点。

示例:
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

返回它的最小深度  2.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        /*

        if(root==null){
            return 0;
        }

        //左右孩子均为空，只有根节点
        if(root.left==null&&root.right==null){
            return 1;
        }

        int left=minDepth(root.left);
        int right=minDepth(root.right);

        //左右孩子有一个为空，返回较大孩子的深度，其中有一个必为0，所以可直接返回left+right+1
        if(root.left==null||root.right==null){
            return left+right+1;
        }

        //左右孩子均不为空，返回较小深度
        return Math.min(left,right)+1;

        */


        //优化：
        if(root==null) return 0;
        int left=minDepth(root.left);
        int right=minDepth(root.right);
        //当左右孩子都为空时 left 和 right 都为 0,可以进行合并，即如果左孩子和右孩子有为空的情况下，返回 left+right+1
        //如果左右孩子均不为空，返回 Math.min(left,right)+1
        return root.left==null||root.right==null ? left+right+1 : Math.min(left,right)+1;
    }
}
